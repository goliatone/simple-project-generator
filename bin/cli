#!/usr/bin/env node

'use strict';

const prog = require('caporal');
const pkg = require('../package.json');
const GenerateCommand = require('../commands/generate');

prog
    .version(pkg.version)
    .description(pkg.description)
    //$0 new ./example /tmp/core.io/output/#name#
    .command(GenerateCommand.COMMAND_NAME,
        'Create a new project from a project template')
    .argument('[source]', 'Template name, local or repository', /.*/,
        GenerateCommand.DEFAULTS.source)
    .argument('[output]', 'Filename for output.', /.*/, GenerateCommand.DEFAULTS
        .output)
    .option('--clean',
        'Should the contents of [source] be removed before running', prog.BOOL,
        GenerateCommand.DEFAULTS.options.clean)
    .option('--prompt-file', 'Prompt file for this project', prog.BOOL,
        GenerateCommand.DEFAULTS.options.saveGuiSchema)
    .option('--dry-run', 'Prompt file for this project', prog.BOOL,
        GenerateCommand.DEFAULTS.options.saveGuiSchema)
    .option('--templates <path>', '<path> to template files', null,
        GenerateCommand.DEFAULTS.options.templates)
    .action((args, options, logger) => {

        const command = new GenerateCommand({
            logger: logger
        });

        args.options = options;

        command.execute(args)
            .then((context)=>{
                logger.info('Generate command complete...');
                process.exit(0);
            })
            .catch(logger.error);
    });

const AddTemplateCommand = require('../commands/add-template');
prog
//$0 new ./example /tmp/core.io/output/#name#
    .command(AddTemplateCommand.COMMAND_NAME,
        'Add a project template from github or a local directory')
    .argument('[source]', 'Github username and project, path to local template',
        /.*/, AddTemplateCommand.DEFAULTS.source)
    .argument('[alias]', 'Save template with [alias].', /.*/)
    .option('--skip-cache', 'Force download template even if its cached.', prog
        .BOOL, AddTemplateCommand.DEFAULTS.options.skipCache)
    .option('--templates <path>', '<path> to template files', null,
        AddTemplateCommand.DEFAULTS.options.templates)
    .action((args, options, logger) => {

        const command = new AddTemplateCommand({
            logger: logger
        });

        args.options = options;

        command.execute(args).catch(logger.error);
    });

const ListTemplatesCommand = require('../commands/list-templates');
prog
    .command(ListTemplatesCommand.COMMAND_NAME, 'List available templates')
    .option('--templates <path>', '<path> to template files', null,
        ListTemplatesCommand.DEFAULTS.options.templates)
    .action((args, options, logger) => {

        const command = new ListTemplatesCommand({
            logger: logger
        });

        args.options = options;

        command.execute(args).catch(logger.error);
    });

prog.parse(process.argv);
